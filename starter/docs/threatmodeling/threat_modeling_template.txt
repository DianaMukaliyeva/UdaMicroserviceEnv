**STRIDE 101 for reviewer:**

STRIDE is a model to think about what can wrong with system security before it goes wrong and doing something about it such as hardening or designing the system accordingly. 

Authored in 1999 by two Microsoft security researchers, STRIDE remains a useful approach to surface potential issues. In this post, we’ll cover each of the six areas of STRIDE you can use to proactively limit threats as you build your systems.

“Threat modeling is the key to a focused defense. Without threat modeling, you can never
stop playing whack-a-mole.”— Adam Shostack [Leading expert on threat modeling an author of Threat Modeling: Designing for Security]


* Spoofing - Pretending to be something or someone other than yourself
* Tampering - Modifying something on disk, network, memory, or elsewhere
* Repudiation - Claiming that you didn’t do something or were not responsible;
can be honest or false
* Information Disclosure - Providing information to someone not authorized to access it
* Denial of Service - Exhausting resources needed to provide service
* Elevation of Privilege - Allowing someone to do something they are not authorized to do


**Docker Threat Model**

**Provide an abstraction of the system**

**Provide the boundaries of the system**

**Provide the core docker system entities**

**Provide a profile of potential attackers, including their goals and methods**

**Given system primitives and the STRIDE, identify at least 5 potential threats that may arise**


***Hardening Docker Weaknesses**

e.g. 1. Tampering- Only trusted users should control the docker daemon. If a non-trusted user is added to the trusted group they could tamper with the system leading to modification of key system files.


1. 
2. 
3.
4.
5.


**Kubernetes Threat Model**

**Provide an abstraction of the system**

**Provide the boundaries of the system**

**Provide the core Kubernetes system entities**

**Provide a profile of potential attackers, including their goals and methods**

**Given system primitives and the STRIDE, identify at least 5 potential threats that may arise**


***Hardening Kubernetes Weaknesses**

e.g. 1. Elevation of Privilege - Master node API server pod configuration files should not have overly permissive permissions (e.g. 777). These files control the behavior of the API server pod, overly permissive permissions may allow changes by non-administrators.

1. 
2. 
3.
4.
5.

References for reviews as you have not completed the lessons yet and may not know STRIDE:

https://blog.eccouncil.org/what-is-stride-methodology-in-threat-modeling/
https://insights.sei.cmu.edu/sei_blog/2018/12/threat-modeling-12-available-methods.html
https://resources.sei.cmu.edu/asset_files/WhitePaper/2018_019_001_524597.pdf
https://thoughtworksinc.github.io/sensible-security-conversations/materials/Sensible_Agile_Threat_Modelling_Deck.pdf


**OWASP 101 for reviewers*


The OWASP Top 10 is a standard and process web application security for engineers. It represents a broad consensus about the most critical security risks to web applications.

Authored in the early 2000s be members of the OWASP project, it has become the defecto standard for threat modeling application security risk.

"Security is not a product, its a process" - Bruce Schneier [Leading cryptographer, computer security professional, privacy specialist and supporter of OWASP] 

* Injection. Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.

* Broken Authentication. Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.

* Sensitive Data Exposure. Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.

* XML External Entities (XXE). Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.

* Broken Access Control. Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users’ accounts, view sensitive files, modify other users’ data, change access rights, etc.

* Security Misconfiguration. Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion.

* Cross-Site Scripting (XSS). XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.

* Insecure Deserialization. Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.

* Using Components with Known Vulnerabilities. Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.

* Insufficient Logging & Monitoring. Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.

**OWASP Top 10 Security Model**

e.g. 1. Sensitive Data Exposure - Secrets for the Flask application stored at in plain text may be leaked if the source code is compromised.

1. 
2.
3.
4.
5.


References for reviews as you have not completed the lessons yet and may not know OWASP:

https://owasp.org/www-project-top-ten/2017/
https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html


**Falco Threat Model**

* Investigate the default Falco rules file located at /etc/falco/falco_rules.yaml. It contains a predefined set of rules designed to provide good coverage in a variety of situations.

* Assess at least five threats to identify which threats the rule may identify and document why.

e.g. 1. 

Sample falco rule:

- macro: spawned_process
  condition: evt.type = execve and evt.dir=<

Tampering - Spawning a shell may be indicative of lateral movement.

1.
2.
3.
4.
5.


**You should now have 20 total observations in the threat modeling file, Inclusive of Docker, Kubernetes, Flask app and Falco**







